#!/bin/bash
# =========================================================================
# =========================================================================
#
#	debian-deb-start
#	  Creates a new container, if needed, then starts it.
#
# =========================================================================
#
# @author Jay Wheeler.
# @version 0.0.2
# @copyright © 2018. EarthWalk Software.
# @license Licensed under the GNU General Public License, GPL-3.0-or-later.
# @package ewsdocker/debian-base
# @subpackage debian-deb-start
#
# =========================================================================
#
#	Copyright © 2018. EarthWalk Software
#	Licensed under the GNU General Public License, GPL-3.0-or-later.
#
#   This file is part of ewsdocker/debian-docker-start.
#
#   ewsdocker/debian-docker-start is free software: you can redistribute 
#   it and/or modify it under the terms of the GNU General Public License 
#   as published by the Free Software Foundation, either version 3 of the 
#   License, or (at your option) any later version.
#
#   ewsdocker/debian-docker-start is distributed in the hope that it will 
#   be useful, but WITHOUT ANY WARRANTY; without even the implied warranty 
#   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with ewsdocker/debian-docker-start.  If not, see 
#   <http://www.gnu.org/licenses/>.
#
# =========================================================================
# =========================================================================

# =========================================================================
#
#	Runs in docker host system, NOT in the container!
#
# =========================================================================

declare    lmsContainer_name=""
declare    lmsContainer_status=""
declare    lmsContainer_pass=0

declare -a lmsContainer_fields=()
declare -a cliBuffer=( "${@}" )

# =========================================================================================
# =========================================================================================

[[ ${#cliBuffer} -eq 0 ]] && 
 {
    echo "Missing container name \"${lmsContainer_name}\""
    exit 1
 }

lmsContainer="${cliBuffer[0]}"
lmsContainer_name="${lmsContainer//:/-}"

source ${HOME}/.config/docker/${lmsContainer_name}/lms-base.conf

LMS_BIN="${LMS_BASE}/bin"
LMS_LIB="${LMS_BASE}/lib/lms"
LMS_SHARE="${LMS_BASE}/share/lms"

source ${LMS_LIB}/lmsconDisplay-0.0.1.bash

# =========================================================================================
# =========================================================================================

# =========================================================================================
#
#	getStatus
#
#		get the current status of the application
#
#	parameters:
#
#		filters = string to explode
#    Result:
#        0 = no error
#        non-zero = error number
#
# =========================================================================================
function getStatus()
{
  local status="${1}"

  lmsContainer_status=$(docker ps -a --filter name=${lmsContainer_name} --filter status="${status}" )
  [[ $? -eq 0 ]] || 
   {
     lmsconDisplay "docker ps failed."
     return 1
   }

  return 0
}

# =========================================================================================
# =========================================================================================

# =========================================================================================
#
#
#   checkStaus
#
#  		Check the requested status and the search string present
#
#   parameters:
#      $pStatus = (string) Status to check for (refer to docker ps)
#      $pSearch = (string) Value to search for in $lmsContainer_status
#
#	returns:
#      0 = status matched and search value was found
#      1 = docker ps failed
#      2 = status or search string did not match
#
# =========================================================================================
function checkStatus()
{
    local pStatus="${1}"
    local pSearch="${2}"

	getStatus "${pStatus}"
	[[ $? -eq 0 ]] || return 1

	if echo "${lmsContainer_status}" | grep -q "${pSearch}"
	then 
	    return 0
	fi

	return 2
}

# =========================================================================================
#
#   isRunning
#
#   	returns 0 if running, 1 if doesn't exist or exec. error, 2 no match
#
#   parameters:
#      $pStatus = (string) Status to check for (refer to docker ps)
#      $pSearch = (string) Value to search for in $lmsContainer_status
#
#	returns:
#      0 = running
#      1 = doesn't exist or exec. error
#      2 = no match
#
# =========================================================================================
function isRunning()
{
    checkStatus "running" "Up"
    [[ $? -ne 2 ]] && 
     {
     	[[ $? -eq 0 ]] &&
     	 {
 			lmsconDisplay ""
			lmsconDisplay "\"${lmsContainer_name}\" is already running."
     	    return 0
     	 }
     	 
     	return $?
	 }

	lmsconDisplay ""
	lmsconDisplay "\"${lmsContainer_name}\" is not running."

    checkStatus "exited" "Exited"
    [[ $? -ne 2 ]] && 
     {
         [[ $? -eq 0 ]] || return 1
       
		lmsconDisplay ""
		lmsconDisplay "Starting container \"${lmsContainer_name}\""
        docker start ${lmsContainer_name}
        [[ $? -eq 0 ]] || 
         {
			lmsconDisplay ""
			lmsconDisplay "Failed to start \"${lmsContainer_name}\""
            return 1
         }

		lmsconDisplay ""
		lmsconDisplay "\"${lmsContainer_name}\" started."
	    return 0
	 }

	checkStatus "created" "Created"
    [[ $? -ne 2 ]] && 
     {
         [[ $? -eq 0 ]] || return 1

		lmsconDisplay ""
		lmsconDisplay "Created container, now starting!"

		docker start ${lmsContainer_name}
        [[ $? -eq 0 ]] || return 1

		lmsconDisplay ""
		lmsconDisplay "Container \"${lmsContainer_name}\" started."
	    return 0
	 }

    [[ ${lmsContainer_pass} -eq 0 ]] || return 1

	if [ ! -e "${LMS_BIN}/${lmsContainer_name}" ]
	then
		lmsconDisplay ""
		lmsconDisplay "Unknown container \"${LMS_BIN}/${lmsContainer_name}\""
	  	return 1
	fi

	lmsconDisplay ""
	lmsconDisplay "Creating a new container named \"${lmsContainer_name}\" using \"${LMS_BIN}/${lmsContainer_name}\""

	${LMS_BIN}/${lmsContainer_name} & > /dev/null 2>&1

	sleep 1
	disown

    (( lmsContainer_pass++ ))
 
 	[[ ${lmsContainer_pass} -gt 1 ]] &&
 	 {
		lmsconDisplay ""
		lmsconDisplay "Unable to create \"${lmsContainer_name}\""
        return 1
 	 }

	lmsconDisplay ""
	lmsconDisplay "Checking that created container \"${lmsContainer_name}\" has started."

	isRunning
	return $?
}

# =========================================================================================
# =========================================================================================
#
#		Start Application Here
#
# =========================================================================================
# =========================================================================================

lmscli_optQuiet=1
lmsContainer_pass=0
lerr=0

isRunning
[[ $? -eq 0 ]] || 
 {
    lerr=$?
    (( lerr+=2 ))

	lmsconDisplay ""
    lmsconDisplay "Unable to start \"${lmsContainer_name}\""
    exit $lerr
 }

exit 0

